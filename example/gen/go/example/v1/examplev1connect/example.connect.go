// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: example/v1/example.proto

package examplev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/redpanda-data/protoc-gen-go-mcp/example/gen/go/example/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExampleServiceName is the fully-qualified name of the ExampleService service.
	ExampleServiceName = "example.v1.ExampleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExampleServiceCreateExampleProcedure is the fully-qualified name of the ExampleService's
	// CreateExample RPC.
	ExampleServiceCreateExampleProcedure = "/example.v1.ExampleService/CreateExample"
	// ExampleServiceGetExampleProcedure is the fully-qualified name of the ExampleService's GetExample
	// RPC.
	ExampleServiceGetExampleProcedure = "/example.v1.ExampleService/GetExample"
	// ExampleServiceDeleteExampleProcedure is the fully-qualified name of the ExampleService's
	// DeleteExample RPC.
	ExampleServiceDeleteExampleProcedure = "/example.v1.ExampleService/DeleteExample"
)

// ExampleServiceClient is a client for the example.v1.ExampleService service.
type ExampleServiceClient interface {
	// @ignore-comment Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// CreateExample creates a new example resource with the provided configuration.
	// This demonstrates option-based custom tool naming - the protobuf option below
	// overrides the default auto-generated name.
	CreateExample(context.Context, *connect.Request[v1.CreateExampleRequest]) (*connect.Response[v1.CreateExampleResponse], error)
	// GetExample retrieves an existing example resource by ID.
	// This method uses option-based custom tool naming (preferred approach).
	GetExample(context.Context, *connect.Request[v1.GetExampleRequest]) (*connect.Response[v1.GetExampleResponse], error)
	// DeleteExample removes an example resource permanently.
	// This method demonstrates that you can mix custom-named and auto-named methods.
	// Since there's no mcp_tool_name annotation, this will use the default:
	// "example_v1_ExampleService_DeleteExample"
	DeleteExample(context.Context, *connect.Request[v1.DeleteExampleRequest]) (*connect.Response[v1.DeleteExampleResponse], error)
}

// NewExampleServiceClient constructs a client for the example.v1.ExampleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExampleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExampleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	exampleServiceMethods := v1.File_example_v1_example_proto.Services().ByName("ExampleService").Methods()
	return &exampleServiceClient{
		createExample: connect.NewClient[v1.CreateExampleRequest, v1.CreateExampleResponse](
			httpClient,
			baseURL+ExampleServiceCreateExampleProcedure,
			connect.WithSchema(exampleServiceMethods.ByName("CreateExample")),
			connect.WithClientOptions(opts...),
		),
		getExample: connect.NewClient[v1.GetExampleRequest, v1.GetExampleResponse](
			httpClient,
			baseURL+ExampleServiceGetExampleProcedure,
			connect.WithSchema(exampleServiceMethods.ByName("GetExample")),
			connect.WithClientOptions(opts...),
		),
		deleteExample: connect.NewClient[v1.DeleteExampleRequest, v1.DeleteExampleResponse](
			httpClient,
			baseURL+ExampleServiceDeleteExampleProcedure,
			connect.WithSchema(exampleServiceMethods.ByName("DeleteExample")),
			connect.WithClientOptions(opts...),
		),
	}
}

// exampleServiceClient implements ExampleServiceClient.
type exampleServiceClient struct {
	createExample *connect.Client[v1.CreateExampleRequest, v1.CreateExampleResponse]
	getExample    *connect.Client[v1.GetExampleRequest, v1.GetExampleResponse]
	deleteExample *connect.Client[v1.DeleteExampleRequest, v1.DeleteExampleResponse]
}

// CreateExample calls example.v1.ExampleService.CreateExample.
func (c *exampleServiceClient) CreateExample(ctx context.Context, req *connect.Request[v1.CreateExampleRequest]) (*connect.Response[v1.CreateExampleResponse], error) {
	return c.createExample.CallUnary(ctx, req)
}

// GetExample calls example.v1.ExampleService.GetExample.
func (c *exampleServiceClient) GetExample(ctx context.Context, req *connect.Request[v1.GetExampleRequest]) (*connect.Response[v1.GetExampleResponse], error) {
	return c.getExample.CallUnary(ctx, req)
}

// DeleteExample calls example.v1.ExampleService.DeleteExample.
func (c *exampleServiceClient) DeleteExample(ctx context.Context, req *connect.Request[v1.DeleteExampleRequest]) (*connect.Response[v1.DeleteExampleResponse], error) {
	return c.deleteExample.CallUnary(ctx, req)
}

// ExampleServiceHandler is an implementation of the example.v1.ExampleService service.
type ExampleServiceHandler interface {
	// @ignore-comment Ignore these linter rules, because we intentionally return a generic Operation message for all long-running operations.
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// CreateExample creates a new example resource with the provided configuration.
	// This demonstrates option-based custom tool naming - the protobuf option below
	// overrides the default auto-generated name.
	CreateExample(context.Context, *connect.Request[v1.CreateExampleRequest]) (*connect.Response[v1.CreateExampleResponse], error)
	// GetExample retrieves an existing example resource by ID.
	// This method uses option-based custom tool naming (preferred approach).
	GetExample(context.Context, *connect.Request[v1.GetExampleRequest]) (*connect.Response[v1.GetExampleResponse], error)
	// DeleteExample removes an example resource permanently.
	// This method demonstrates that you can mix custom-named and auto-named methods.
	// Since there's no mcp_tool_name annotation, this will use the default:
	// "example_v1_ExampleService_DeleteExample"
	DeleteExample(context.Context, *connect.Request[v1.DeleteExampleRequest]) (*connect.Response[v1.DeleteExampleResponse], error)
}

// NewExampleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExampleServiceHandler(svc ExampleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	exampleServiceMethods := v1.File_example_v1_example_proto.Services().ByName("ExampleService").Methods()
	exampleServiceCreateExampleHandler := connect.NewUnaryHandler(
		ExampleServiceCreateExampleProcedure,
		svc.CreateExample,
		connect.WithSchema(exampleServiceMethods.ByName("CreateExample")),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceGetExampleHandler := connect.NewUnaryHandler(
		ExampleServiceGetExampleProcedure,
		svc.GetExample,
		connect.WithSchema(exampleServiceMethods.ByName("GetExample")),
		connect.WithHandlerOptions(opts...),
	)
	exampleServiceDeleteExampleHandler := connect.NewUnaryHandler(
		ExampleServiceDeleteExampleProcedure,
		svc.DeleteExample,
		connect.WithSchema(exampleServiceMethods.ByName("DeleteExample")),
		connect.WithHandlerOptions(opts...),
	)
	return "/example.v1.ExampleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExampleServiceCreateExampleProcedure:
			exampleServiceCreateExampleHandler.ServeHTTP(w, r)
		case ExampleServiceGetExampleProcedure:
			exampleServiceGetExampleHandler.ServeHTTP(w, r)
		case ExampleServiceDeleteExampleProcedure:
			exampleServiceDeleteExampleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExampleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExampleServiceHandler struct{}

func (UnimplementedExampleServiceHandler) CreateExample(context.Context, *connect.Request[v1.CreateExampleRequest]) (*connect.Response[v1.CreateExampleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.ExampleService.CreateExample is not implemented"))
}

func (UnimplementedExampleServiceHandler) GetExample(context.Context, *connect.Request[v1.GetExampleRequest]) (*connect.Response[v1.GetExampleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.ExampleService.GetExample is not implemented"))
}

func (UnimplementedExampleServiceHandler) DeleteExample(context.Context, *connect.Request[v1.DeleteExampleRequest]) (*connect.Response[v1.DeleteExampleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("example.v1.ExampleService.DeleteExample is not implemented"))
}
