version: '3'

vars:
  BINARY_NAME: protoc-gen-go-mcp

tasks:
  test:
    desc: Run all tests
    cmds:
      - go test ./...

  build:
    desc: Build the binary
    cmds:
      - go build -o {{.BINARY_NAME}} ./cmd/protoc-gen-go-mcp

  install:
    desc: Install the binary to GOPATH/bin
    cmds:
      - go install ./cmd/protoc-gen-go-mcp

  generate-golden:
    desc: Update golden test files
    cmds:
      - echo "Updating golden test files..."
      - go test ./pkg/generator -update-golden -v
      - gofumpt -l -w .
      - echo "Golden files updated successfully!"


  generate:
    desc: Generate testdata (including integration test protos)
    dir: pkg/testdata
    cmds:
      - buf generate
      - gofumpt -l -w .

  integrationtest:
    desc: Run integration tests (requires OPENAI_API_KEY)
    deps: [generate]
    cmds:
      - |
        if [ -f .env ]; then
          export $(cat .env | xargs) && go test -tags=integration ./integrationtest -v
        else
          go test -tags=integration ./integrationtest -v
        fi

  lint:
    desc: Lint code
    cmds:
      - golangci-lint run

  fmt:
    desc: Format code
    cmds:
      - gofumpt -l -w .

  check-fmt:
    desc: Check if code is formatted
    aliases: [fmt:check]
    cmds:
      - |
        files=$(gofumpt -l cmd/ pkg/generator/ pkg/runtime/ examples/ integrationtest/ 2>/dev/null || true)
        if [ -n "$files" ]; then
          echo "Code is not formatted. Please run 'task fmt'"
          echo "$files"
          exit 1
        fi
