// Code generated by protoc-gen-mcp-go. DO NOT EDIT.
// source: generator/simple_service.proto

package generatormcp

import (
	generator "github.com/redpanda-data/protoc-gen-go-mcp/pkg/testdata/gen/go/generator"
)

import (
	"context"
	"github.com/mark3labs/mcp-go/mcp"
	mcpserver "github.com/mark3labs/mcp-go/server"
	"encoding/json"
	"google.golang.org/protobuf/encoding/protojson"
	"connectrpc.com/connect"
	grpc "google.golang.org/grpc"
	"github.com/redpanda-data/protoc-gen-go-mcp/pkg/runtime"
)

// LLMProvider represents different LLM providers for runtime selection
type LLMProvider string

const (
	LLMProviderStandard LLMProvider = "standard"
	LLMProviderOpenAI   LLMProvider = "openai"
)

var (
	SimpleService_EchoTool       = mcp.Tool{Name: "simple_v1_SimpleService_Echo", Description: "Echo returns the input message\n", InputSchema: mcp.ToolInputSchema{Type: "", Properties: map[string]interface{}(nil), Required: []string(nil)}, RawInputSchema: json.RawMessage{0x7b, 0x22, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7d, 0x7d, 0x2c, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x3a, 0x5b, 0x5d, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x7d}}
	SimpleService_EchoToolOpenAI = mcp.Tool{Name: "simple_v1_SimpleService_Echo", Description: "Echo returns the input message\n", InputSchema: mcp.ToolInputSchema{Type: "", Properties: map[string]interface{}(nil), Required: []string(nil)}, RawInputSchema: json.RawMessage{0x7b, 0x22, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x22, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7d, 0x7d, 0x2c, 0x22, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x3a, 0x5b, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x7d}}
)

// SimpleServiceServer is compatible with the grpc-go server interface.
type SimpleServiceServer interface {
	Echo(ctx context.Context, req *generator.EchoRequest) (*generator.EchoResponse, error)
}

// RegisterSimpleServiceHandler registers standard MCP handlers for SimpleService
func RegisterSimpleServiceHandler(s *mcpserver.MCPServer, srv SimpleServiceServer) {
	s.AddTool(SimpleService_EchoTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		var req generator.EchoRequest

		message := request.Params.Arguments

		marshaled, err := json.Marshal(message)
		if err != nil {
			return nil, err
		}

		if err := (protojson.UnmarshalOptions{DiscardUnknown: true}).Unmarshal(marshaled, &req); err != nil {
			return nil, err
		}

		resp, err := srv.Echo(ctx, &req)
		if err != nil {
			return nil, err
		}

		marshaled, err = (protojson.MarshalOptions{UseProtoNames: true, EmitDefaultValues: true}).Marshal(resp)
		if err != nil {
			return nil, err
		}

		return mcp.NewToolResultText(string(marshaled)), nil
	})
}

// RegisterSimpleServiceHandlerOpenAI registers OpenAI-compatible MCP handlers for SimpleService
func RegisterSimpleServiceHandlerOpenAI(s *mcpserver.MCPServer, srv SimpleServiceServer) {
	s.AddTool(SimpleService_EchoToolOpenAI, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		var req generator.EchoRequest

		message := request.Params.Arguments
		runtime.FixOpenAI(req.ProtoReflect().Descriptor(), message)

		marshaled, err := json.Marshal(message)
		if err != nil {
			return nil, err
		}

		if err := (protojson.UnmarshalOptions{DiscardUnknown: true}).Unmarshal(marshaled, &req); err != nil {
			return nil, err
		}

		resp, err := srv.Echo(ctx, &req)
		if err != nil {
			return nil, err
		}

		marshaled, err = (protojson.MarshalOptions{UseProtoNames: true, EmitDefaultValues: true}).Marshal(resp)
		if err != nil {
			return nil, err
		}

		return mcp.NewToolResultText(string(marshaled)), nil
	})
}

// RegisterSimpleServiceHandlerWithProvider registers handlers for the specified LLM provider
func RegisterSimpleServiceHandlerWithProvider(s *mcpserver.MCPServer, srv SimpleServiceServer, provider LLMProvider) {
	switch provider {
	case LLMProviderOpenAI:
		RegisterSimpleServiceHandlerOpenAI(s, srv)
	case LLMProviderStandard:
		fallthrough
	default:
		RegisterSimpleServiceHandler(s, srv)
	}
}

// SimpleServiceClient is compatible with the grpc-go client interface.
type SimpleServiceClient interface {
	Echo(ctx context.Context, req *generator.EchoRequest, opts ...grpc.CallOption) (*generator.EchoResponse, error)
}

// ConnectSimpleServiceClient is compatible with the connectrpc-go client interface.
type ConnectSimpleServiceClient interface {
	Echo(ctx context.Context, req *connect.Request[generator.EchoRequest]) (*connect.Response[generator.EchoResponse], error)
}

// ForwardToConnectSimpleServiceClient registers a connectrpc client, to forward MCP calls to it.
func ForwardToConnectSimpleServiceClient(s *mcpserver.MCPServer, client ConnectSimpleServiceClient) {
	s.AddTool(SimpleService_EchoTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		var req generator.EchoRequest

		message := request.Params.Arguments

		marshaled, err := json.Marshal(message)
		if err != nil {
			return nil, err
		}

		if err := (protojson.UnmarshalOptions{DiscardUnknown: true}).Unmarshal(marshaled, &req); err != nil {
			return nil, err
		}

		resp, err := client.Echo(ctx, connect.NewRequest(&req))
		if err != nil {
			return nil, err
		}

		marshaled, err = (protojson.MarshalOptions{UseProtoNames: true, EmitDefaultValues: true}).Marshal(resp.Msg)
		if err != nil {
			return nil, err
		}
		return mcp.NewToolResultText(string(marshaled)), nil
	})
}

// ForwardToSimpleServiceClient registers a gRPC client, to forward MCP calls to it.
func ForwardToSimpleServiceClient(s *mcpserver.MCPServer, client SimpleServiceClient) {
	s.AddTool(SimpleService_EchoTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		var req generator.EchoRequest

		message := request.Params.Arguments

		marshaled, err := json.Marshal(message)
		if err != nil {
			return nil, err
		}

		if err := (protojson.UnmarshalOptions{DiscardUnknown: true}).Unmarshal(marshaled, &req); err != nil {
			return nil, err
		}

		resp, err := client.Echo(ctx, &req)
		if err != nil {
			return nil, err
		}

		marshaled, err = (protojson.MarshalOptions{UseProtoNames: true, EmitDefaultValues: true}).Marshal(resp)
		if err != nil {
			return nil, err
		}
		return mcp.NewToolResultText(string(marshaled)), nil
	})
}
