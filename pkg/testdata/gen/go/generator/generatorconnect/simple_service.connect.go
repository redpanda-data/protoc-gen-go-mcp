// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: generator/simple_service.proto

package generatorconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	generator "github.com/redpanda-data/protoc-gen-go-mcp/pkg/testdata/gen/go/generator"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SimpleServiceName is the fully-qualified name of the SimpleService service.
	SimpleServiceName = "simple.v1.SimpleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SimpleServiceEchoProcedure is the fully-qualified name of the SimpleService's Echo RPC.
	SimpleServiceEchoProcedure = "/simple.v1.SimpleService/Echo"
)

// SimpleServiceClient is a client for the simple.v1.SimpleService service.
type SimpleServiceClient interface {
	// Echo returns the input message
	Echo(context.Context, *connect.Request[generator.EchoRequest]) (*connect.Response[generator.EchoResponse], error)
}

// NewSimpleServiceClient constructs a client for the simple.v1.SimpleService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSimpleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SimpleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	simpleServiceMethods := generator.File_generator_simple_service_proto.Services().ByName("SimpleService").Methods()
	return &simpleServiceClient{
		echo: connect.NewClient[generator.EchoRequest, generator.EchoResponse](
			httpClient,
			baseURL+SimpleServiceEchoProcedure,
			connect.WithSchema(simpleServiceMethods.ByName("Echo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// simpleServiceClient implements SimpleServiceClient.
type simpleServiceClient struct {
	echo *connect.Client[generator.EchoRequest, generator.EchoResponse]
}

// Echo calls simple.v1.SimpleService.Echo.
func (c *simpleServiceClient) Echo(ctx context.Context, req *connect.Request[generator.EchoRequest]) (*connect.Response[generator.EchoResponse], error) {
	return c.echo.CallUnary(ctx, req)
}

// SimpleServiceHandler is an implementation of the simple.v1.SimpleService service.
type SimpleServiceHandler interface {
	// Echo returns the input message
	Echo(context.Context, *connect.Request[generator.EchoRequest]) (*connect.Response[generator.EchoResponse], error)
}

// NewSimpleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSimpleServiceHandler(svc SimpleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	simpleServiceMethods := generator.File_generator_simple_service_proto.Services().ByName("SimpleService").Methods()
	simpleServiceEchoHandler := connect.NewUnaryHandler(
		SimpleServiceEchoProcedure,
		svc.Echo,
		connect.WithSchema(simpleServiceMethods.ByName("Echo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/simple.v1.SimpleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SimpleServiceEchoProcedure:
			simpleServiceEchoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSimpleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSimpleServiceHandler struct{}

func (UnimplementedSimpleServiceHandler) Echo(context.Context, *connect.Request[generator.EchoRequest]) (*connect.Response[generator.EchoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("simple.v1.SimpleService.Echo is not implemented"))
}
