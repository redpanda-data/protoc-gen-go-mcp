// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: generator/test_service.proto

package generatorconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	generator "github.com/redpanda-data/protoc-gen-go-mcp/pkg/testdata/gen/go/generator"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TestServiceName is the fully-qualified name of the TestService service.
	TestServiceName = "testservice.v1.TestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TestServiceCreateItemProcedure is the fully-qualified name of the TestService's CreateItem RPC.
	TestServiceCreateItemProcedure = "/testservice.v1.TestService/CreateItem"
	// TestServiceGetItemProcedure is the fully-qualified name of the TestService's GetItem RPC.
	TestServiceGetItemProcedure = "/testservice.v1.TestService/GetItem"
)

// TestServiceClient is a client for the testservice.v1.TestService service.
type TestServiceClient interface {
	// CreateItem creates a new item
	CreateItem(context.Context, *connect.Request[generator.CreateItemRequest]) (*connect.Response[generator.CreateItemResponse], error)
	// GetItem retrieves an item by ID
	GetItem(context.Context, *connect.Request[generator.GetItemRequest]) (*connect.Response[generator.GetItemResponse], error)
}

// NewTestServiceClient constructs a client for the testservice.v1.TestService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	testServiceMethods := generator.File_generator_test_service_proto.Services().ByName("TestService").Methods()
	return &testServiceClient{
		createItem: connect.NewClient[generator.CreateItemRequest, generator.CreateItemResponse](
			httpClient,
			baseURL+TestServiceCreateItemProcedure,
			connect.WithSchema(testServiceMethods.ByName("CreateItem")),
			connect.WithClientOptions(opts...),
		),
		getItem: connect.NewClient[generator.GetItemRequest, generator.GetItemResponse](
			httpClient,
			baseURL+TestServiceGetItemProcedure,
			connect.WithSchema(testServiceMethods.ByName("GetItem")),
			connect.WithClientOptions(opts...),
		),
	}
}

// testServiceClient implements TestServiceClient.
type testServiceClient struct {
	createItem *connect.Client[generator.CreateItemRequest, generator.CreateItemResponse]
	getItem    *connect.Client[generator.GetItemRequest, generator.GetItemResponse]
}

// CreateItem calls testservice.v1.TestService.CreateItem.
func (c *testServiceClient) CreateItem(ctx context.Context, req *connect.Request[generator.CreateItemRequest]) (*connect.Response[generator.CreateItemResponse], error) {
	return c.createItem.CallUnary(ctx, req)
}

// GetItem calls testservice.v1.TestService.GetItem.
func (c *testServiceClient) GetItem(ctx context.Context, req *connect.Request[generator.GetItemRequest]) (*connect.Response[generator.GetItemResponse], error) {
	return c.getItem.CallUnary(ctx, req)
}

// TestServiceHandler is an implementation of the testservice.v1.TestService service.
type TestServiceHandler interface {
	// CreateItem creates a new item
	CreateItem(context.Context, *connect.Request[generator.CreateItemRequest]) (*connect.Response[generator.CreateItemResponse], error)
	// GetItem retrieves an item by ID
	GetItem(context.Context, *connect.Request[generator.GetItemRequest]) (*connect.Response[generator.GetItemResponse], error)
}

// NewTestServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTestServiceHandler(svc TestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	testServiceMethods := generator.File_generator_test_service_proto.Services().ByName("TestService").Methods()
	testServiceCreateItemHandler := connect.NewUnaryHandler(
		TestServiceCreateItemProcedure,
		svc.CreateItem,
		connect.WithSchema(testServiceMethods.ByName("CreateItem")),
		connect.WithHandlerOptions(opts...),
	)
	testServiceGetItemHandler := connect.NewUnaryHandler(
		TestServiceGetItemProcedure,
		svc.GetItem,
		connect.WithSchema(testServiceMethods.ByName("GetItem")),
		connect.WithHandlerOptions(opts...),
	)
	return "/testservice.v1.TestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TestServiceCreateItemProcedure:
			testServiceCreateItemHandler.ServeHTTP(w, r)
		case TestServiceGetItemProcedure:
			testServiceGetItemHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTestServiceHandler struct{}

func (UnimplementedTestServiceHandler) CreateItem(context.Context, *connect.Request[generator.CreateItemRequest]) (*connect.Response[generator.CreateItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testservice.v1.TestService.CreateItem is not implemented"))
}

func (UnimplementedTestServiceHandler) GetItem(context.Context, *connect.Request[generator.GetItemRequest]) (*connect.Response[generator.GetItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testservice.v1.TestService.GetItem is not implemented"))
}
