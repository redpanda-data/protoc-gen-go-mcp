// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: testdata/mcp_reproducer.proto

package testdataconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	testdata "github.com/redpanda-data/protoc-gen-go-mcp/pkg/testdata/gen/go-golden/testdata"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MCPServerServiceName is the fully-qualified name of the MCPServerService service.
	MCPServerServiceName = "testdata.MCPServerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MCPServerServiceListMCPServersProcedure is the fully-qualified name of the MCPServerService's
	// ListMCPServers RPC.
	MCPServerServiceListMCPServersProcedure = "/testdata.MCPServerService/ListMCPServers"
	// MCPServerServiceCreateMCPServerProcedure is the fully-qualified name of the MCPServerService's
	// CreateMCPServer RPC.
	MCPServerServiceCreateMCPServerProcedure = "/testdata.MCPServerService/CreateMCPServer"
	// MCPServerServiceGetMCPServerProcedure is the fully-qualified name of the MCPServerService's
	// GetMCPServer RPC.
	MCPServerServiceGetMCPServerProcedure = "/testdata.MCPServerService/GetMCPServer"
	// MCPServerServiceUpdateMCPServerProcedure is the fully-qualified name of the MCPServerService's
	// UpdateMCPServer RPC.
	MCPServerServiceUpdateMCPServerProcedure = "/testdata.MCPServerService/UpdateMCPServer"
	// MCPServerServiceDeleteMCPServerProcedure is the fully-qualified name of the MCPServerService's
	// DeleteMCPServer RPC.
	MCPServerServiceDeleteMCPServerProcedure = "/testdata.MCPServerService/DeleteMCPServer"
)

// MCPServerServiceClient is a client for the testdata.MCPServerService service.
type MCPServerServiceClient interface {
	// Works: No path parameters, only extra properties
	ListMCPServers(context.Context, *connect.Request[testdata.ListMCPServersRequest]) (*connect.Response[testdata.ListMCPServersResponse], error)
	// Works: No path parameters, only extra properties
	CreateMCPServer(context.Context, *connect.Request[testdata.CreateMCPServerRequest]) (*connect.Response[testdata.CreateMCPServerResponse], error)
	// FAILS: Has path parameter (id) + extra properties
	GetMCPServer(context.Context, *connect.Request[testdata.GetMCPServerRequest]) (*connect.Response[testdata.GetMCPServerResponse], error)
	// FAILS: Has path parameter (id) + extra properties
	UpdateMCPServer(context.Context, *connect.Request[testdata.UpdateMCPServerRequest]) (*connect.Response[testdata.UpdateMCPServerResponse], error)
	// FAILS: Has path parameter (id) + extra properties
	DeleteMCPServer(context.Context, *connect.Request[testdata.DeleteMCPServerRequest]) (*connect.Response[testdata.DeleteMCPServerResponse], error)
}

// NewMCPServerServiceClient constructs a client for the testdata.MCPServerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMCPServerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MCPServerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	mCPServerServiceMethods := testdata.File_testdata_mcp_reproducer_proto.Services().ByName("MCPServerService").Methods()
	return &mCPServerServiceClient{
		listMCPServers: connect.NewClient[testdata.ListMCPServersRequest, testdata.ListMCPServersResponse](
			httpClient,
			baseURL+MCPServerServiceListMCPServersProcedure,
			connect.WithSchema(mCPServerServiceMethods.ByName("ListMCPServers")),
			connect.WithClientOptions(opts...),
		),
		createMCPServer: connect.NewClient[testdata.CreateMCPServerRequest, testdata.CreateMCPServerResponse](
			httpClient,
			baseURL+MCPServerServiceCreateMCPServerProcedure,
			connect.WithSchema(mCPServerServiceMethods.ByName("CreateMCPServer")),
			connect.WithClientOptions(opts...),
		),
		getMCPServer: connect.NewClient[testdata.GetMCPServerRequest, testdata.GetMCPServerResponse](
			httpClient,
			baseURL+MCPServerServiceGetMCPServerProcedure,
			connect.WithSchema(mCPServerServiceMethods.ByName("GetMCPServer")),
			connect.WithClientOptions(opts...),
		),
		updateMCPServer: connect.NewClient[testdata.UpdateMCPServerRequest, testdata.UpdateMCPServerResponse](
			httpClient,
			baseURL+MCPServerServiceUpdateMCPServerProcedure,
			connect.WithSchema(mCPServerServiceMethods.ByName("UpdateMCPServer")),
			connect.WithClientOptions(opts...),
		),
		deleteMCPServer: connect.NewClient[testdata.DeleteMCPServerRequest, testdata.DeleteMCPServerResponse](
			httpClient,
			baseURL+MCPServerServiceDeleteMCPServerProcedure,
			connect.WithSchema(mCPServerServiceMethods.ByName("DeleteMCPServer")),
			connect.WithClientOptions(opts...),
		),
	}
}

// mCPServerServiceClient implements MCPServerServiceClient.
type mCPServerServiceClient struct {
	listMCPServers  *connect.Client[testdata.ListMCPServersRequest, testdata.ListMCPServersResponse]
	createMCPServer *connect.Client[testdata.CreateMCPServerRequest, testdata.CreateMCPServerResponse]
	getMCPServer    *connect.Client[testdata.GetMCPServerRequest, testdata.GetMCPServerResponse]
	updateMCPServer *connect.Client[testdata.UpdateMCPServerRequest, testdata.UpdateMCPServerResponse]
	deleteMCPServer *connect.Client[testdata.DeleteMCPServerRequest, testdata.DeleteMCPServerResponse]
}

// ListMCPServers calls testdata.MCPServerService.ListMCPServers.
func (c *mCPServerServiceClient) ListMCPServers(ctx context.Context, req *connect.Request[testdata.ListMCPServersRequest]) (*connect.Response[testdata.ListMCPServersResponse], error) {
	return c.listMCPServers.CallUnary(ctx, req)
}

// CreateMCPServer calls testdata.MCPServerService.CreateMCPServer.
func (c *mCPServerServiceClient) CreateMCPServer(ctx context.Context, req *connect.Request[testdata.CreateMCPServerRequest]) (*connect.Response[testdata.CreateMCPServerResponse], error) {
	return c.createMCPServer.CallUnary(ctx, req)
}

// GetMCPServer calls testdata.MCPServerService.GetMCPServer.
func (c *mCPServerServiceClient) GetMCPServer(ctx context.Context, req *connect.Request[testdata.GetMCPServerRequest]) (*connect.Response[testdata.GetMCPServerResponse], error) {
	return c.getMCPServer.CallUnary(ctx, req)
}

// UpdateMCPServer calls testdata.MCPServerService.UpdateMCPServer.
func (c *mCPServerServiceClient) UpdateMCPServer(ctx context.Context, req *connect.Request[testdata.UpdateMCPServerRequest]) (*connect.Response[testdata.UpdateMCPServerResponse], error) {
	return c.updateMCPServer.CallUnary(ctx, req)
}

// DeleteMCPServer calls testdata.MCPServerService.DeleteMCPServer.
func (c *mCPServerServiceClient) DeleteMCPServer(ctx context.Context, req *connect.Request[testdata.DeleteMCPServerRequest]) (*connect.Response[testdata.DeleteMCPServerResponse], error) {
	return c.deleteMCPServer.CallUnary(ctx, req)
}

// MCPServerServiceHandler is an implementation of the testdata.MCPServerService service.
type MCPServerServiceHandler interface {
	// Works: No path parameters, only extra properties
	ListMCPServers(context.Context, *connect.Request[testdata.ListMCPServersRequest]) (*connect.Response[testdata.ListMCPServersResponse], error)
	// Works: No path parameters, only extra properties
	CreateMCPServer(context.Context, *connect.Request[testdata.CreateMCPServerRequest]) (*connect.Response[testdata.CreateMCPServerResponse], error)
	// FAILS: Has path parameter (id) + extra properties
	GetMCPServer(context.Context, *connect.Request[testdata.GetMCPServerRequest]) (*connect.Response[testdata.GetMCPServerResponse], error)
	// FAILS: Has path parameter (id) + extra properties
	UpdateMCPServer(context.Context, *connect.Request[testdata.UpdateMCPServerRequest]) (*connect.Response[testdata.UpdateMCPServerResponse], error)
	// FAILS: Has path parameter (id) + extra properties
	DeleteMCPServer(context.Context, *connect.Request[testdata.DeleteMCPServerRequest]) (*connect.Response[testdata.DeleteMCPServerResponse], error)
}

// NewMCPServerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMCPServerServiceHandler(svc MCPServerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	mCPServerServiceMethods := testdata.File_testdata_mcp_reproducer_proto.Services().ByName("MCPServerService").Methods()
	mCPServerServiceListMCPServersHandler := connect.NewUnaryHandler(
		MCPServerServiceListMCPServersProcedure,
		svc.ListMCPServers,
		connect.WithSchema(mCPServerServiceMethods.ByName("ListMCPServers")),
		connect.WithHandlerOptions(opts...),
	)
	mCPServerServiceCreateMCPServerHandler := connect.NewUnaryHandler(
		MCPServerServiceCreateMCPServerProcedure,
		svc.CreateMCPServer,
		connect.WithSchema(mCPServerServiceMethods.ByName("CreateMCPServer")),
		connect.WithHandlerOptions(opts...),
	)
	mCPServerServiceGetMCPServerHandler := connect.NewUnaryHandler(
		MCPServerServiceGetMCPServerProcedure,
		svc.GetMCPServer,
		connect.WithSchema(mCPServerServiceMethods.ByName("GetMCPServer")),
		connect.WithHandlerOptions(opts...),
	)
	mCPServerServiceUpdateMCPServerHandler := connect.NewUnaryHandler(
		MCPServerServiceUpdateMCPServerProcedure,
		svc.UpdateMCPServer,
		connect.WithSchema(mCPServerServiceMethods.ByName("UpdateMCPServer")),
		connect.WithHandlerOptions(opts...),
	)
	mCPServerServiceDeleteMCPServerHandler := connect.NewUnaryHandler(
		MCPServerServiceDeleteMCPServerProcedure,
		svc.DeleteMCPServer,
		connect.WithSchema(mCPServerServiceMethods.ByName("DeleteMCPServer")),
		connect.WithHandlerOptions(opts...),
	)
	return "/testdata.MCPServerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MCPServerServiceListMCPServersProcedure:
			mCPServerServiceListMCPServersHandler.ServeHTTP(w, r)
		case MCPServerServiceCreateMCPServerProcedure:
			mCPServerServiceCreateMCPServerHandler.ServeHTTP(w, r)
		case MCPServerServiceGetMCPServerProcedure:
			mCPServerServiceGetMCPServerHandler.ServeHTTP(w, r)
		case MCPServerServiceUpdateMCPServerProcedure:
			mCPServerServiceUpdateMCPServerHandler.ServeHTTP(w, r)
		case MCPServerServiceDeleteMCPServerProcedure:
			mCPServerServiceDeleteMCPServerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMCPServerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMCPServerServiceHandler struct{}

func (UnimplementedMCPServerServiceHandler) ListMCPServers(context.Context, *connect.Request[testdata.ListMCPServersRequest]) (*connect.Response[testdata.ListMCPServersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.MCPServerService.ListMCPServers is not implemented"))
}

func (UnimplementedMCPServerServiceHandler) CreateMCPServer(context.Context, *connect.Request[testdata.CreateMCPServerRequest]) (*connect.Response[testdata.CreateMCPServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.MCPServerService.CreateMCPServer is not implemented"))
}

func (UnimplementedMCPServerServiceHandler) GetMCPServer(context.Context, *connect.Request[testdata.GetMCPServerRequest]) (*connect.Response[testdata.GetMCPServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.MCPServerService.GetMCPServer is not implemented"))
}

func (UnimplementedMCPServerServiceHandler) UpdateMCPServer(context.Context, *connect.Request[testdata.UpdateMCPServerRequest]) (*connect.Response[testdata.UpdateMCPServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.MCPServerService.UpdateMCPServer is not implemented"))
}

func (UnimplementedMCPServerServiceHandler) DeleteMCPServer(context.Context, *connect.Request[testdata.DeleteMCPServerRequest]) (*connect.Response[testdata.DeleteMCPServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("testdata.MCPServerService.DeleteMCPServer is not implemented"))
}
