// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: testdata/mcp_reproducer.proto

package testdata

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Reproduces the exact ListMCPServersRequest structure (no path params)
type ListMCPServersRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Filter        *ListMCPServersRequest_Filter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	PageSize      int32                         `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken     string                        `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMCPServersRequest) Reset() {
	*x = ListMCPServersRequest{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMCPServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMCPServersRequest) ProtoMessage() {}

func (x *ListMCPServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMCPServersRequest.ProtoReflect.Descriptor instead.
func (*ListMCPServersRequest) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{0}
}

func (x *ListMCPServersRequest) GetFilter() *ListMCPServersRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListMCPServersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMCPServersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Reproduces the exact CreateMCPServerRequest structure (no path params)
type CreateMCPServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     *MCPServer             `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMCPServerRequest) Reset() {
	*x = CreateMCPServerRequest{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMCPServerRequest) ProtoMessage() {}

func (x *CreateMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMCPServerRequest.ProtoReflect.Descriptor instead.
func (*CreateMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{1}
}

func (x *CreateMCPServerRequest) GetMcpServer() *MCPServer {
	if x != nil {
		return x.McpServer
	}
	return nil
}

// Reproduces the exact GetMCPServerRequest structure (HAS path param)
type GetMCPServerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the path parameter that causes the bug
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMCPServerRequest) Reset() {
	*x = GetMCPServerRequest{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMCPServerRequest) ProtoMessage() {}

func (x *GetMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMCPServerRequest.ProtoReflect.Descriptor instead.
func (*GetMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{2}
}

func (x *GetMCPServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Reproduces the exact UpdateMCPServerRequest structure (HAS path param)
type UpdateMCPServerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the path parameter that causes the bug
	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	McpServer *MCPServerUpdate `protobuf:"bytes,2,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	// This field might also contribute to the issue
	UpdateMask    string `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMCPServerRequest) Reset() {
	*x = UpdateMCPServerRequest{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMCPServerRequest) ProtoMessage() {}

func (x *UpdateMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMCPServerRequest.ProtoReflect.Descriptor instead.
func (*UpdateMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateMCPServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateMCPServerRequest) GetMcpServer() *MCPServerUpdate {
	if x != nil {
		return x.McpServer
	}
	return nil
}

func (x *UpdateMCPServerRequest) GetUpdateMask() string {
	if x != nil {
		return x.UpdateMask
	}
	return ""
}

// Reproduces the exact DeleteMCPServerRequest structure (HAS path param)
type DeleteMCPServerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the path parameter that causes the bug
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMCPServerRequest) Reset() {
	*x = DeleteMCPServerRequest{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMCPServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMCPServerRequest) ProtoMessage() {}

func (x *DeleteMCPServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMCPServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteMCPServerRequest) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteMCPServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// MCPServer message that mimics the complex nested structure
type MCPServer struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string                 `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// This map field gets converted to array-of-key-value-pairs in OpenAI mode
	// and contains complex nested YAML configs
	Tools     map[string]*MCPServer_Tool `protobuf:"bytes,4,rep,name=tools,proto3" json:"tools,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Resources *MCPServer_Resources       `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"`
	// Another map field
	Tags          []*Tag `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Url           string `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	State         string `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServer) Reset() {
	*x = MCPServer{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServer) ProtoMessage() {}

func (x *MCPServer) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServer.ProtoReflect.Descriptor instead.
func (*MCPServer) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{5}
}

func (x *MCPServer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MCPServer) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MCPServer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MCPServer) GetTools() map[string]*MCPServer_Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *MCPServer) GetResources() *MCPServer_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MCPServer) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MCPServer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MCPServer) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// MCPServerUpdate message for updates
type MCPServerUpdate struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	DisplayName   string                     `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Description   string                     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Tools         map[string]*MCPServer_Tool `protobuf:"bytes,3,rep,name=tools,proto3" json:"tools,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Resources     *MCPServer_Resources       `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	Tags          []*Tag                     `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServerUpdate) Reset() {
	*x = MCPServerUpdate{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServerUpdate) ProtoMessage() {}

func (x *MCPServerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServerUpdate.ProtoReflect.Descriptor instead.
func (*MCPServerUpdate) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{6}
}

func (x *MCPServerUpdate) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MCPServerUpdate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MCPServerUpdate) GetTools() map[string]*MCPServer_Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *MCPServerUpdate) GetResources() *MCPServer_Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *MCPServerUpdate) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Tag message
type Tag struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tag) Reset() {
	*x = Tag{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{7}
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Response messages
type ListMCPServersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServers    []*MCPServer           `protobuf:"bytes,1,rep,name=mcp_servers,json=mcpServers,proto3" json:"mcp_servers,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMCPServersResponse) Reset() {
	*x = ListMCPServersResponse{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMCPServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMCPServersResponse) ProtoMessage() {}

func (x *ListMCPServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMCPServersResponse.ProtoReflect.Descriptor instead.
func (*ListMCPServersResponse) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{8}
}

func (x *ListMCPServersResponse) GetMcpServers() []*MCPServer {
	if x != nil {
		return x.McpServers
	}
	return nil
}

func (x *ListMCPServersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateMCPServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     *MCPServer             `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMCPServerResponse) Reset() {
	*x = CreateMCPServerResponse{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMCPServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMCPServerResponse) ProtoMessage() {}

func (x *CreateMCPServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMCPServerResponse.ProtoReflect.Descriptor instead.
func (*CreateMCPServerResponse) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{9}
}

func (x *CreateMCPServerResponse) GetMcpServer() *MCPServer {
	if x != nil {
		return x.McpServer
	}
	return nil
}

type GetMCPServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     *MCPServer             `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMCPServerResponse) Reset() {
	*x = GetMCPServerResponse{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMCPServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMCPServerResponse) ProtoMessage() {}

func (x *GetMCPServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMCPServerResponse.ProtoReflect.Descriptor instead.
func (*GetMCPServerResponse) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{10}
}

func (x *GetMCPServerResponse) GetMcpServer() *MCPServer {
	if x != nil {
		return x.McpServer
	}
	return nil
}

type UpdateMCPServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     *MCPServer             `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMCPServerResponse) Reset() {
	*x = UpdateMCPServerResponse{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMCPServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMCPServerResponse) ProtoMessage() {}

func (x *UpdateMCPServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMCPServerResponse.ProtoReflect.Descriptor instead.
func (*UpdateMCPServerResponse) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateMCPServerResponse) GetMcpServer() *MCPServer {
	if x != nil {
		return x.McpServer
	}
	return nil
}

type DeleteMCPServerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMCPServerResponse) Reset() {
	*x = DeleteMCPServerResponse{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMCPServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMCPServerResponse) ProtoMessage() {}

func (x *DeleteMCPServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMCPServerResponse.ProtoReflect.Descriptor instead.
func (*DeleteMCPServerResponse) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{12}
}

type ListMCPServersRequest_Filter struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	DisplayNameContains string                 `protobuf:"bytes,1,opt,name=display_name_contains,json=displayNameContains,proto3" json:"display_name_contains,omitempty"`
	Tags                []*Tag                 `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	SecretId            string                 `protobuf:"bytes,3,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListMCPServersRequest_Filter) Reset() {
	*x = ListMCPServersRequest_Filter{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMCPServersRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMCPServersRequest_Filter) ProtoMessage() {}

func (x *ListMCPServersRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMCPServersRequest_Filter.ProtoReflect.Descriptor instead.
func (*ListMCPServersRequest_Filter) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ListMCPServersRequest_Filter) GetDisplayNameContains() string {
	if x != nil {
		return x.DisplayNameContains
	}
	return ""
}

func (x *ListMCPServersRequest_Filter) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListMCPServersRequest_Filter) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

type MCPServer_Tool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ComponentType string                 `protobuf:"bytes,1,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	// This field contains YAML with URLs that get corrupted
	ConfigYaml    string `protobuf:"bytes,2,opt,name=config_yaml,json=configYaml,proto3" json:"config_yaml,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServer_Tool) Reset() {
	*x = MCPServer_Tool{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServer_Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServer_Tool) ProtoMessage() {}

func (x *MCPServer_Tool) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServer_Tool.ProtoReflect.Descriptor instead.
func (*MCPServer_Tool) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{5, 1}
}

func (x *MCPServer_Tool) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *MCPServer_Tool) GetConfigYaml() string {
	if x != nil {
		return x.ConfigYaml
	}
	return ""
}

type MCPServer_Resources struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MemoryShares  string                 `protobuf:"bytes,1,opt,name=memory_shares,json=memoryShares,proto3" json:"memory_shares,omitempty"`
	CpuShares     string                 `protobuf:"bytes,2,opt,name=cpu_shares,json=cpuShares,proto3" json:"cpu_shares,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MCPServer_Resources) Reset() {
	*x = MCPServer_Resources{}
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MCPServer_Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MCPServer_Resources) ProtoMessage() {}

func (x *MCPServer_Resources) ProtoReflect() protoreflect.Message {
	mi := &file_testdata_mcp_reproducer_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MCPServer_Resources.ProtoReflect.Descriptor instead.
func (*MCPServer_Resources) Descriptor() ([]byte, []int) {
	return file_testdata_mcp_reproducer_proto_rawDescGZIP(), []int{5, 2}
}

func (x *MCPServer_Resources) GetMemoryShares() string {
	if x != nil {
		return x.MemoryShares
	}
	return ""
}

func (x *MCPServer_Resources) GetCpuShares() string {
	if x != nil {
		return x.CpuShares
	}
	return ""
}

var File_testdata_mcp_reproducer_proto protoreflect.FileDescriptor

const file_testdata_mcp_reproducer_proto_rawDesc = "" +
	"\n" +
	"\x1dtestdata/mcp_reproducer.proto\x12\btestdata\x1a\x1fgoogle/api/field_behavior.proto\"\x91\x02\n" +
	"\x15ListMCPServersRequest\x12>\n" +
	"\x06filter\x18\x01 \x01(\v2&.testdata.ListMCPServersRequest.FilterR\x06filter\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x1a|\n" +
	"\x06Filter\x122\n" +
	"\x15display_name_contains\x18\x01 \x01(\tR\x13displayNameContains\x12!\n" +
	"\x04tags\x18\x02 \x03(\v2\r.testdata.TagR\x04tags\x12\x1b\n" +
	"\tsecret_id\x18\x03 \x01(\tR\bsecretId\"Q\n" +
	"\x16CreateMCPServerRequest\x127\n" +
	"\n" +
	"mcp_server\x18\x01 \x01(\v2\x13.testdata.MCPServerB\x03\xe0A\x02R\tmcpServer\"*\n" +
	"\x13GetMCPServerRequest\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tB\x03\xe0A\x02R\x02id\"\x8d\x01\n" +
	"\x16UpdateMCPServerRequest\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tB\x03\xe0A\x02R\x02id\x12=\n" +
	"\n" +
	"mcp_server\x18\x02 \x01(\v2\x19.testdata.MCPServerUpdateB\x03\xe0A\x02R\tmcpServer\x12\x1f\n" +
	"\vupdate_mask\x18\x03 \x01(\tR\n" +
	"updateMask\"-\n" +
	"\x16DeleteMCPServerRequest\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tB\x03\xe0A\x02R\x02id\"\x98\x04\n" +
	"\tMCPServer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12!\n" +
	"\fdisplay_name\x18\x02 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x124\n" +
	"\x05tools\x18\x04 \x03(\v2\x1e.testdata.MCPServer.ToolsEntryR\x05tools\x12;\n" +
	"\tresources\x18\x05 \x01(\v2\x1d.testdata.MCPServer.ResourcesR\tresources\x12!\n" +
	"\x04tags\x18\x06 \x03(\v2\r.testdata.TagR\x04tags\x12\x10\n" +
	"\x03url\x18\a \x01(\tR\x03url\x12\x14\n" +
	"\x05state\x18\b \x01(\tR\x05state\x1aR\n" +
	"\n" +
	"ToolsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.testdata.MCPServer.ToolR\x05value:\x028\x01\x1aS\n" +
	"\x04Tool\x12%\n" +
	"\x0ecomponent_type\x18\x01 \x01(\tR\rcomponentType\x12$\n" +
	"\vconfig_yaml\x18\x02 \x01(\tB\x03\xe0A\x02R\n" +
	"configYaml\x1aO\n" +
	"\tResources\x12#\n" +
	"\rmemory_shares\x18\x01 \x01(\tR\fmemoryShares\x12\x1d\n" +
	"\n" +
	"cpu_shares\x18\x02 \x01(\tR\tcpuShares\"\xc6\x02\n" +
	"\x0fMCPServerUpdate\x12!\n" +
	"\fdisplay_name\x18\x01 \x01(\tR\vdisplayName\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12:\n" +
	"\x05tools\x18\x03 \x03(\v2$.testdata.MCPServerUpdate.ToolsEntryR\x05tools\x12;\n" +
	"\tresources\x18\x04 \x01(\v2\x1d.testdata.MCPServer.ResourcesR\tresources\x12!\n" +
	"\x04tags\x18\x05 \x03(\v2\r.testdata.TagR\x04tags\x1aR\n" +
	"\n" +
	"ToolsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12.\n" +
	"\x05value\x18\x02 \x01(\v2\x18.testdata.MCPServer.ToolR\x05value:\x028\x01\"-\n" +
	"\x03Tag\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"v\n" +
	"\x16ListMCPServersResponse\x124\n" +
	"\vmcp_servers\x18\x01 \x03(\v2\x13.testdata.MCPServerR\n" +
	"mcpServers\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"M\n" +
	"\x17CreateMCPServerResponse\x122\n" +
	"\n" +
	"mcp_server\x18\x01 \x01(\v2\x13.testdata.MCPServerR\tmcpServer\"J\n" +
	"\x14GetMCPServerResponse\x122\n" +
	"\n" +
	"mcp_server\x18\x01 \x01(\v2\x13.testdata.MCPServerR\tmcpServer\"M\n" +
	"\x17UpdateMCPServerResponse\x122\n" +
	"\n" +
	"mcp_server\x18\x01 \x01(\v2\x13.testdata.MCPServerR\tmcpServer\"\x19\n" +
	"\x17DeleteMCPServerResponse2\xbe\x03\n" +
	"\x10MCPServerService\x12S\n" +
	"\x0eListMCPServers\x12\x1f.testdata.ListMCPServersRequest\x1a .testdata.ListMCPServersResponse\x12V\n" +
	"\x0fCreateMCPServer\x12 .testdata.CreateMCPServerRequest\x1a!.testdata.CreateMCPServerResponse\x12M\n" +
	"\fGetMCPServer\x12\x1d.testdata.GetMCPServerRequest\x1a\x1e.testdata.GetMCPServerResponse\x12V\n" +
	"\x0fUpdateMCPServer\x12 .testdata.UpdateMCPServerRequest\x1a!.testdata.UpdateMCPServerResponse\x12V\n" +
	"\x0fDeleteMCPServer\x12 .testdata.DeleteMCPServerRequest\x1a!.testdata.DeleteMCPServerResponseB\xb2\x01\n" +
	"\fcom.testdataB\x12McpReproducerProtoP\x01ZNgithub.com/redpanda-data/protoc-gen-go-mcp/pkg/testdata/gen/go-golden/testdata\xa2\x02\x03TXX\xaa\x02\bTestdata\xca\x02\bTestdata\xe2\x02\x14Testdata\\GPBMetadata\xea\x02\bTestdatab\x06proto3"

var (
	file_testdata_mcp_reproducer_proto_rawDescOnce sync.Once
	file_testdata_mcp_reproducer_proto_rawDescData []byte
)

func file_testdata_mcp_reproducer_proto_rawDescGZIP() []byte {
	file_testdata_mcp_reproducer_proto_rawDescOnce.Do(func() {
		file_testdata_mcp_reproducer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_testdata_mcp_reproducer_proto_rawDesc), len(file_testdata_mcp_reproducer_proto_rawDesc)))
	})
	return file_testdata_mcp_reproducer_proto_rawDescData
}

var file_testdata_mcp_reproducer_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_testdata_mcp_reproducer_proto_goTypes = []any{
	(*ListMCPServersRequest)(nil),        // 0: testdata.ListMCPServersRequest
	(*CreateMCPServerRequest)(nil),       // 1: testdata.CreateMCPServerRequest
	(*GetMCPServerRequest)(nil),          // 2: testdata.GetMCPServerRequest
	(*UpdateMCPServerRequest)(nil),       // 3: testdata.UpdateMCPServerRequest
	(*DeleteMCPServerRequest)(nil),       // 4: testdata.DeleteMCPServerRequest
	(*MCPServer)(nil),                    // 5: testdata.MCPServer
	(*MCPServerUpdate)(nil),              // 6: testdata.MCPServerUpdate
	(*Tag)(nil),                          // 7: testdata.Tag
	(*ListMCPServersResponse)(nil),       // 8: testdata.ListMCPServersResponse
	(*CreateMCPServerResponse)(nil),      // 9: testdata.CreateMCPServerResponse
	(*GetMCPServerResponse)(nil),         // 10: testdata.GetMCPServerResponse
	(*UpdateMCPServerResponse)(nil),      // 11: testdata.UpdateMCPServerResponse
	(*DeleteMCPServerResponse)(nil),      // 12: testdata.DeleteMCPServerResponse
	(*ListMCPServersRequest_Filter)(nil), // 13: testdata.ListMCPServersRequest.Filter
	nil,                                  // 14: testdata.MCPServer.ToolsEntry
	(*MCPServer_Tool)(nil),               // 15: testdata.MCPServer.Tool
	(*MCPServer_Resources)(nil),          // 16: testdata.MCPServer.Resources
	nil,                                  // 17: testdata.MCPServerUpdate.ToolsEntry
}
var file_testdata_mcp_reproducer_proto_depIdxs = []int32{
	13, // 0: testdata.ListMCPServersRequest.filter:type_name -> testdata.ListMCPServersRequest.Filter
	5,  // 1: testdata.CreateMCPServerRequest.mcp_server:type_name -> testdata.MCPServer
	6,  // 2: testdata.UpdateMCPServerRequest.mcp_server:type_name -> testdata.MCPServerUpdate
	14, // 3: testdata.MCPServer.tools:type_name -> testdata.MCPServer.ToolsEntry
	16, // 4: testdata.MCPServer.resources:type_name -> testdata.MCPServer.Resources
	7,  // 5: testdata.MCPServer.tags:type_name -> testdata.Tag
	17, // 6: testdata.MCPServerUpdate.tools:type_name -> testdata.MCPServerUpdate.ToolsEntry
	16, // 7: testdata.MCPServerUpdate.resources:type_name -> testdata.MCPServer.Resources
	7,  // 8: testdata.MCPServerUpdate.tags:type_name -> testdata.Tag
	5,  // 9: testdata.ListMCPServersResponse.mcp_servers:type_name -> testdata.MCPServer
	5,  // 10: testdata.CreateMCPServerResponse.mcp_server:type_name -> testdata.MCPServer
	5,  // 11: testdata.GetMCPServerResponse.mcp_server:type_name -> testdata.MCPServer
	5,  // 12: testdata.UpdateMCPServerResponse.mcp_server:type_name -> testdata.MCPServer
	7,  // 13: testdata.ListMCPServersRequest.Filter.tags:type_name -> testdata.Tag
	15, // 14: testdata.MCPServer.ToolsEntry.value:type_name -> testdata.MCPServer.Tool
	15, // 15: testdata.MCPServerUpdate.ToolsEntry.value:type_name -> testdata.MCPServer.Tool
	0,  // 16: testdata.MCPServerService.ListMCPServers:input_type -> testdata.ListMCPServersRequest
	1,  // 17: testdata.MCPServerService.CreateMCPServer:input_type -> testdata.CreateMCPServerRequest
	2,  // 18: testdata.MCPServerService.GetMCPServer:input_type -> testdata.GetMCPServerRequest
	3,  // 19: testdata.MCPServerService.UpdateMCPServer:input_type -> testdata.UpdateMCPServerRequest
	4,  // 20: testdata.MCPServerService.DeleteMCPServer:input_type -> testdata.DeleteMCPServerRequest
	8,  // 21: testdata.MCPServerService.ListMCPServers:output_type -> testdata.ListMCPServersResponse
	9,  // 22: testdata.MCPServerService.CreateMCPServer:output_type -> testdata.CreateMCPServerResponse
	10, // 23: testdata.MCPServerService.GetMCPServer:output_type -> testdata.GetMCPServerResponse
	11, // 24: testdata.MCPServerService.UpdateMCPServer:output_type -> testdata.UpdateMCPServerResponse
	12, // 25: testdata.MCPServerService.DeleteMCPServer:output_type -> testdata.DeleteMCPServerResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_testdata_mcp_reproducer_proto_init() }
func file_testdata_mcp_reproducer_proto_init() {
	if File_testdata_mcp_reproducer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_testdata_mcp_reproducer_proto_rawDesc), len(file_testdata_mcp_reproducer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_testdata_mcp_reproducer_proto_goTypes,
		DependencyIndexes: file_testdata_mcp_reproducer_proto_depIdxs,
		MessageInfos:      file_testdata_mcp_reproducer_proto_msgTypes,
	}.Build()
	File_testdata_mcp_reproducer_proto = out.File
	file_testdata_mcp_reproducer_proto_goTypes = nil
	file_testdata_mcp_reproducer_proto_depIdxs = nil
}
